diff --git a/library/CMakeLists.txt b/library/CMakeLists.txt
index fcd00a0ab5..fa8e0fe9d4 100644
--- a/library/CMakeLists.txt
+++ b/library/CMakeLists.txt
@@ -215,7 +215,7 @@ if(CMAKE_COMPILER_IS_MSVC)
 endif()
 
 if(WIN32)
-    set(libs ${libs} ws2_32 bcrypt)
+    set(libs ${libs} ws2_32)
 endif(WIN32)
 
 if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
diff --git a/library/entropy_poll.c b/library/entropy_poll.c
index e8c669f9ce..fd1972895b 100644
--- a/library/entropy_poll.c
+++ b/library/entropy_poll.c
@@ -37,33 +37,28 @@
 #if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)
 
 #include <windows.h>
-#include <bcrypt.h>
-#include <intsafe.h>
+#include <wincrypt.h>
 
 int mbedtls_platform_entropy_poll(void *data, unsigned char *output, size_t len,
                                   size_t *olen)
 {
+    HCRYPTPROV provider;
     ((void) data);
     *olen = 0;
 
-    /*
-     * BCryptGenRandom takes ULONG for size, which is smaller than size_t on
-     * 64-bit Windows platforms. Extract entropy in chunks of len (dependent
-     * on ULONG_MAX) size.
-     */
-    while (len != 0) {
-        unsigned long ulong_bytes =
-            (len > ULONG_MAX) ? ULONG_MAX : (unsigned long) len;
-
-        if (!BCRYPT_SUCCESS(BCryptGenRandom(NULL, output, ulong_bytes,
-                                            BCRYPT_USE_SYSTEM_PREFERRED_RNG))) {
-            return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
-        }
+    if (CryptAcquireContext(&provider, NULL, NULL,
+                            PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) == FALSE) {
+        return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
+    }
 
-        *olen += ulong_bytes;
-        len -= ulong_bytes;
+    if (CryptGenRandom(provider, (DWORD) len, output) == FALSE) {
+        CryptReleaseContext(provider, 0);
+        return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
     }
 
+    CryptReleaseContext(provider, 0);
+    *olen = len;
+
     return 0;
 }
 #else /* _WIN32 && !EFIX64 && !EFI32 */
diff --git a/library/x509_crt.c b/library/x509_crt.c
index f41eb47d72..103e1bc7dc 100644
--- a/library/x509_crt.c
+++ b/library/x509_crt.c
@@ -2683,17 +2683,8 @@ find_parent:
 }
 
 #ifdef _WIN32
-#ifdef _MSC_VER
-#pragma comment(lib, "ws2_32.lib")
-#include <winsock2.h>
-#include <ws2tcpip.h>
-#elif (defined(__MINGW32__) || defined(__MINGW64__)) && _WIN32_WINNT >= 0x0600
-#include <winsock2.h>
-#include <ws2tcpip.h>
-#else
 /* inet_pton() is not supported, fallback to software version */
 #define MBEDTLS_TEST_SW_INET_PTON
-#endif
 #elif defined(__sun)
 /* Solaris requires -lsocket -lnsl for inet_pton() */
 #elif defined(__has_include)
